/**
 * Next Up Games API
 * API de proyecto final Desarrollo de Aplicaciones Web.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { JuegosGenero } from '../model/juegosGenero';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class JuegosGeneroService {

    protected basePath = 'http://localhost:8080/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Crear juegos_genero
     * 
     * @param body Objecto juegos_genero creado
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createGameGenre(body: JuegosGenero, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createGameGenre(body: JuegosGenero, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createGameGenre(body: JuegosGenero, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createGameGenre(body: JuegosGenero, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createGameGenre.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/juegos_genero/create`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Borrar juegos_genero
     * 
     * @param idJuego id del juego del juegos_genero que tiene que ser eliminado
     * @param idGenero id del genero del juegos_genero que tiene que ser eliminado
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteGameGenre(idJuego: number, idGenero: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteGameGenre(idJuego: number, idGenero: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteGameGenre(idJuego: number, idGenero: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteGameGenre(idJuego: number, idGenero: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idJuego === null || idJuego === undefined) {
            throw new Error('Required parameter idJuego was null or undefined when calling deleteGameGenre.');
        }

        if (idGenero === null || idGenero === undefined) {
            throw new Error('Required parameter idGenero was null or undefined when calling deleteGameGenre.');
        }

        let headers = this.defaultHeaders;
        if (idJuego !== undefined && idJuego !== null) {
            headers = headers.set('idJuego', String(idJuego));
        }
        if (idGenero !== undefined && idGenero !== null) {
            headers = headers.set('idGenero', String(idGenero));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/juegos_genero/delete`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Recibir todos los juegos de un genero por id
     * 
     * @param idGenero El id del genero del que se quiere recibir juegos.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllGameByGenreId(idGenero: string, observe?: 'body', reportProgress?: boolean): Observable<JuegosGenero>;
    public getAllGameByGenreId(idGenero: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<JuegosGenero>>;
    public getAllGameByGenreId(idGenero: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<JuegosGenero>>;
    public getAllGameByGenreId(idGenero: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idGenero === null || idGenero === undefined) {
            throw new Error('Required parameter idGenero was null or undefined when calling getAllGameByGenreId.');
        }

        let headers = this.defaultHeaders;
        if (idGenero !== undefined && idGenero !== null) {
            headers = headers.set('idGenero', String(idGenero));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<JuegosGenero>(`${this.basePath}/juegos_genero/getAllGameByGenreId`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Recibir todos los valores de juegos_generos
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllGameGenres(observe?: 'body', reportProgress?: boolean): Observable<Array<JuegosGenero>>;
    public getAllGameGenres(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<JuegosGenero>>>;
    public getAllGameGenres(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<JuegosGenero>>>;
    public getAllGameGenres(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<JuegosGenero>>(`${this.basePath}/juegos_genero/getAll`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Recibir todos los generos de un juego por id
     * 
     * @param idJuego El id del juego del que se quiere recibir sus generos.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllGenreByGameId(idJuego: number, observe?: 'body', reportProgress?: boolean): Observable<JuegosGenero>;
    public getAllGenreByGameId(idJuego: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<JuegosGenero>>;
    public getAllGenreByGameId(idJuego: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<JuegosGenero>>;
    public getAllGenreByGameId(idJuego: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idJuego === null || idJuego === undefined) {
            throw new Error('Required parameter idJuego was null or undefined when calling getAllGenreByGameId.');
        }

        let headers = this.defaultHeaders;
        if (idJuego !== undefined && idJuego !== null) {
            headers = headers.set('idJuego', String(idJuego));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<JuegosGenero>(`${this.basePath}/juegos_genero/getAllGenreByGameId`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Actualizar juegos_genero
     * 
     * @param idJuego id del juego del juegos_genero que tiene que ser actualizado
     * @param idGenero id del genero del juegos_genero que tiene que ser actualizado
     * @param body Objeto interes actualizado
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateGameGenre(idJuego: number, idGenero: string, body: JuegosGenero, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateGameGenre(idJuego: number, idGenero: string, body: JuegosGenero, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateGameGenre(idJuego: number, idGenero: string, body: JuegosGenero, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateGameGenre(idJuego: number, idGenero: string, body: JuegosGenero, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (idJuego === null || idJuego === undefined) {
            throw new Error('Required parameter idJuego was null or undefined when calling updateGameGenre.');
        }

        if (idGenero === null || idGenero === undefined) {
            throw new Error('Required parameter idGenero was null or undefined when calling updateGameGenre.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateGameGenre.');
        }

        let headers = this.defaultHeaders;
        if (idJuego !== undefined && idJuego !== null) {
            headers = headers.set('idJuego', String(idJuego));
        }
        if (idGenero !== undefined && idGenero !== null) {
            headers = headers.set('idGenero', String(idGenero));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/juegos_genero/update`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
